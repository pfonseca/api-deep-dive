swagger: '2.0'
info:
  version: '3.0.0'
  title: "API Workshop - Deep Dive"
  description: |
    A Simple adidas product API for the On-Boarding hackathon.
    [On-Boarding trainings](https://tools.adidas-group.com/confluence/display/DSBP/Engineers+On-Boarding+trainings) hackathon

    ## Affordances
    This API affords the following actions:
    - Retrieve the list of products
    - Retrieve a single product
    - Create a product
    - Update an existing product (status...)
    - Retrieve reviews about a product
    - Add a product review
    - Create a user
    - Retrieve user profile
    - Retrieve the user wishlist
    - Add a product into the wishlist
    - Delete a specific product from the wishlist
    - Clear the wishlist

  contact:
    name: Paulo Vitor Mira Fonseca
    url: http://pfonseca.adidas.com/
    email: paulovitor.mira@adidas.com

produces:
  - application/hal+json      # Representation message format
  - application/problem+json  # Error message format

schemes:
  - https

securityDefinitions:
   "API Key":
     type: apiKey
     in: header
     name: Api-Key

security:
  - "API Key": []

paths:
  /:
    x-summary: API Root

    get:
      summary: Retrieve API Root
      description: The API Root contains the initial set of link relations.
      responses:
        200:
          description: The root of the API
          schema:
            $ref: '#/definitions/halRoot'

  /products:
    x-summary: List of Products

    get:
      summary: Retrieve List of Products
      parameters:
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/status'
      responses:
        200:
          description: The list of Products
          schema:
            $ref: '#/definitions/halProducts'

    post:
      summary: Create a New Product
      consumes:
        - application/json
      parameters:
        - name: Product
          in: body
          description: Product to be created
          required: true
          schema:
            $ref: '#/definitions/product'
      responses:
        201:
          description: Newly created product
          schema:
            $ref: '#/definitions/halProduct'

  /products/{productId}:
    x-summary: Product

    parameters:
      - name: productId
        in: path
        description: Id of the Product
        required: true
        type: string
        x-example: '1234'

    get:
      summary: Retrieve Product
      description: Retrieve product details
      responses:
        200:
          description: A particular Product
          schema:
            $ref: '#/definitions/halProduct'
        404:
          description: The request Product wasn't found
          headers:
            Content-Type:
              type: string
              default: application/problem+json
          schema:
            $ref: '#/definitions/productNotFound'

    patch:
      summary: Update Product
      description: Update product details
      consumes:
        - application/json
      parameters:
        - name: Product
          in: body
          description: Partial product update
          required: true
          schema:
            $ref: '#/definitions/productPatch'
      responses:
        200:
          description: The Product was updated
          schema:
            $ref: '#/definitions/halProduct'

    delete:
      summary: Delete Product
      produces: []
      responses:
        204:
          description: The Product was deleted
  
  # Add a product review endpoint. This endpoint will have:
  #  - a method to retrieve a list of product reviews which can be filtered by the pagination offset and a nummber of items per page
  #  - a method to create a product review which will accept a review as a parameter
  # Please reuse the defined parameters and object models.
  # Remember, that the HTTP code for creating and retrieving resources is different. Also take into account fact, that certain user information is created on the server side after receiving user data. What is the implication of that?
  # -------------------------------------------------------------------------------------------
  /products/{product_id}/reviews:

    x-summary: List of Product Reviews

    parameters:
      - name: product_id
        in: path
        description: Id of the Product
        required: true
        type: string
        x-example: 'DB1124'

    get:
      summary: List product reviews
      description: Retrieve a list of product reviews
      parameters:
        - name: offset
          in: query
          description: Number of results to skip from the start of the list
          required: false
          type: string
          default: '0'
          x-example: '10'
        - name: limit
          in: query
          description: The maximum number of reusults to return
          required: false
          type: string
          default: '10'
          x-example: '5'
      responses:
        200:
          description: The list of Product review
          schema:
            $ref: '#/definitions/halReview'

    post:
      summary: Create a New Product Review
      consumes:
        - application/json
      parameters:
        - name: Review
          in: body
          description: Product Review to be created
          required: true
          schema:
            $ref: '#/definitions/review'
      responses:
        201:
          description: Newly created product review
          schema:
            $ref: '#/definitions/halReviews'
  
  # -------------------------------------------------------------------------------------------

  /products/{product_id}/reviews-stats:

    x-summary: List of Product Reviews Stats

    parameters:
      - name: product_id
        in: path
        description: Id of the Product
        required: true
        type: string
        x-example: 'DB1124'

    get:
      summary: List product reviews stats
      description: Retrieve a list of product reviews statistics
      parameters:
        - name: offset
          in: query
          description: Number of results to skip from the start of the list
          required: false
          type: string
          default: '0'
          x-example: '10'
        - name: limit
          in: query
          description: The maximum number of reusults to return
          required: false
          type: string
          default: '10'
          x-example: '5'
        - name: granularity
          in: query
          type: string
          enum:
            - years
            - months
            - days
          default: months
      responses:
        200:
          description: The list of Product review
          schema:
            $ref: '#/definitions/halReviewsStats'
  # -------------------------------------------------------------------------------------------

  # Add a new API definition for collection of users. This collection will allow to add a new item into it. The user data is a JSON object. 
  # -------------------------------------------------------------------------------------------
  /users:
    x-summary: List of Users

    get:
      summary: List Users
      description: Retrieve a list of users
      parameters:
        - name: offset
          in: query
          description: Number of results to skip from the start of the list
          required: false
          type: string
          default: '0'
          x-example: '10'
        - name: limit
          in: query
          description: The maximum number of reusults to return
          required: false
          type: string
          default: '10'
          x-example: '5'
      responses:
        200:
          description: The list of Users
          schema:
            $ref: '#/definitions/halUser'

  /users/{userId}:
    x-summary: User

    parameters:
      - name: userId
        in: path
        description: Id of the User
        required: true
        type: string
        x-example: '1234'

    get:
      summary: Retrieve User
      description: Retrieve user details
      responses:
        200:
          description: A particular User
          schema:
            $ref: '#/definitions/halUser'
        404:
          description: The request User wasn't found
          headers:
            Content-Type:
              type: string
              default: application/problem+json
          schema:
            $ref: '#/definitions/userNotFound'


  #----------- User's Whitelist -------
  /users/{userId}/whitelist:
    x-summary: User's whitelist

    parameters:
      - name: userId
        in: path
        description: Id of the User
        required: true
        type: string
        x-example: '1234'

    get:
      summary: Retrieve User's Whitelist
      description: Retrieve user's whitelist details
      responses:
        200:
          description: A particular User's whitelist
          schema:
            $ref: '#/definitions/halWishlist'
        404:
          description: The request User wasn't found
          headers:
            Content-Type:
              type: string
              default: application/problem+json
          schema:
            $ref: '#/definitions/userNotFound'

    post:
      summary: Create User's Whitelist
      consumes:
        - application/json
      description: Retrieve user's whitelist details
      parameters:
        - name: Whitelist
          in: body
          description: User's whitelist to be updated
          required: true
          schema:
            $ref: '#/definitions/wishProduct'
      responses:
        200:
          description: A particular User's whitelist
          schema:
            $ref: '#/definitions/halWishProduct'

    delete:
      summary: delete all User's Whitelist
      consumes:
        - application/json
      description: Delete user's whitelist
      responses:
        204:
          description: Delete a particular User's whitelist


  /users/{userId}/whitelist/{whitelistId}:
    x-summary: User's whitelist by id

    parameters:
      - name: userId
        in: path
        description: Id of the User
        required: true
        type: string
        x-example: '1234'


    delete:
      summary: delete a specific User's Whitelist
      consumes:
        - application/json
      description: Delete user's whitelist
      parameters:
        - name: whitelistId
          in: path
          description: Id of the Whitelist
          required: true
          type: string
          x-example: '1234'
      responses:
        204:
          description: Delete a particular User's whitelist


  # Add a new endpoint for operations on a specific user. This endpoint will require a parameter in it's path. Please define this parameter below. Remember, that the parameter's name has to relate to the one put in the path above. Don't forget about setting its type.
  # This endpoint will allow to retrieve specific user's information. User's data is immutable and permanent.
  # -------------------------------------------------------------------------------------------
  # /users/{userId}:
  
  # Add an endpoint for operations on a user's wishlist. The operations allowed are retrieving the wishlist, clearing it, adding a new product on the list and deleting a specific product from it. 
  # Is this going to be one endpoint, two or more? 
  # How are you going to clear the wishlist?
  # Remember, that you already have a list of products. Wishlist should contain only the products already defined. 
  # -------------------------------------------------------------------------------------------

parameters:
  # adidas API guidelines: Pagination
  offset:
    name: offset
    in: query
    description: Number of results to skip from the start of the list
    required: false
    type: string
    default: '0'
    x-example: '10'

  # adidas API guidelines: Pagination
  limit:
    name: limit
    in: query
    description: The maximum number of reusults to return
    required: false
    type: string
    default: '10'
    x-example: '5'

  # adidas API guidelines: Sparse fieldset
  fields:
    name: fields
    in: query
    description: Comma-separated list of fields to include in the response
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
    x-example:
      - articleNumber
      - modelNumber

  # adidas API guidelines: Sparse fieldset
  embedded:
    name: embedded
    in: query
    description: Comma-separated list of resource (relations) to embed in the response
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
    x-example:
      - prices
      - assets

  status:
    name: status
    in: query
    description: Product status
    required: false
    type: string
    enum: [
      available,
      pending,
      sold,
      out
    ]
    x-example: "available"

definitions:
  #
  # API Root
  #
  halRoot:
    type: object
    allOf:
      - $ref: '#/definitions/halResource'
    example:
      _links:
        self:
          href: /
        products:
          href: /products

  #
  # Products Resource
  #
  halProducts:
    type: object
    allOf:
      - $ref: '#/definitions/halResource'
    example:
      _links:
        self:
          href: /products

        create:
          href: /products

        next:
          href: /products?offset=5&limit=5

        first:
          href: /products?offset=0&limit=5

        last:
          href: /products?offset=40&limit=5

      _embedded:
        product:
          - $ref: '#/definitions/halProduct/example'

  #
  # Product Resource
  #

  # HAL Wrapper
  halProduct:
    type: object
    allOf:
      - $ref: '#/definitions/halResource'
      - $ref: '#/definitions/product'
    example:
      _links:
        self:
          href: /products/1234

        edit:
          href: /products/1234

        delete:
          href: /products/1234

        profile:
          href: https://adidas-group.com/gdm/OMS

      productNumber: 1234
      itemCount: 42
      status: pending

  # Partial product update
  productPatch:
    type: object
    allOf:
      - $ref: '#/definitions/product'
    example:
      status: unavailable

  ## Product Define the product object. This object has 6 properties: title, description, category, image, status and tags. The first 4 are simple strings. Status is a string which can have one of 3 values: available, pending, sold and out. 
  # Tags is an arrays of strings. Title, description and category are requiered parameters.
  # Extra task - try adding an example. This will be handy for mocking later.
  product:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      category:
        type: string
      image:
        type: string
      status:
        type: string
        enum: [
          available,
          pending,
          sold,
          out
        ]
      tags:
        type: array
        items:
          type: string
    required:
      - title
      - description
      - category
  # --------------------------------------------------------------------------

  # Product Not Found Error
  productNotFound:
    type: object
    allOf:
      - $ref: '#/definitions/problemDetail'
    example:
      title: 'Not Found'
      detail: 'Cannot find the requested product'
      status: 404
      instance: '/products/1234'

  # Reviews list
  halReviews:
    type: object
    properties:
      reviewCount:
        type: number
      averageRating:
        type: number
    allOf:
      - $ref: '#/definitions/halResource'
    example:
      _links:
        self:
          href: /products/{productId}/reviews
          templated: true

        create:
          href: /products/{productId}/reviews
          templated: true

        next:
          href: /products/{productId}/reviews?offset=5&limit=5
          templated: true

        first:
          href: /products/{productId}/reviews?offset=0&limit=5
          templated: true

        last:
          href: /products/{productId}/reviews?offset=40&limit=5
          templated: true

      _embedded:
        reviewCount: 122
        averageRating: 4.3
        review:
          - $ref: '#/definitions/halReview/example'

  # Review body
  review:
    type: object
    properties:
      comment:
        type: string
      rating:
        type: number
    required:
      - comment
      - rating
    example:
      comment: 'This is a review comment example'
      rating: 4.3

  # HAL Single review
  halReview:
    type: object
    properties:
      id:
        type: string
      createdAt:
        type: string
    allOf:
      - $ref: '#/definitions/halResource'
      - $ref: '#/definitions/review'
    example:
      _links:
        self:
          href: /products/{productId}/reviews
          templated: true
      id: 'DB1124'
      comment: 'This is a review comment example'
      rating: 4.3
      createdAt: '2017-06-21T14:07:17Z'

  # Review Stats Resource
  halReviewsStats:
    type: object
    properties:
      reviewCount:
        type: number
      averageRating:
        type: number
    allOf:
      - $ref: '#/definitions/halResource'
    example:
      _links:
        self:
          href: /products/{productId}/reviews-stats
          templated: true

        next:
          href: /products/{productId}/reviews-stats?offset=5&limit=5
          templated: true

        first:
          href: /products/{productId}/reviews-stats?offset=0&limit=5
          templated: true

        last:
          href: /products/{productId}/reviews-stats?offset=40&limit=5
          templated: true

      _embedded:
        reviewCount: 122
        averageRating: 4.3
        history:
          - $ref: '#/definitions/halReviewStatsItem'

  # HAL Wrapper
  halReviewStatsItem:
    type: object
    allOf:
      - $ref: '#/definitions/halResource'
      - $ref: '#/definitions/reviewStatsItem'
    example:
      date: '2017-06-21T14:07:17Z'
      rating: 4.3

  # Review Stats
  reviewStatsItem:
    type: object
    properties:
      comment:
        type: string
      rating:
        type: number
    required:
      - comment
      - rating
    example:
      comment: 'This is a review comment example'
      rating: 4.3

  # HAL Wrapper
  halUser:
    type: object
    properties:
      createdAt:
          type: string
      id: 
          type: string
    allOf:
      - $ref: '#/definitions/halResource'
      - $ref: '#/definitions/user'
    example:
      _links:
        self:
          href: /users/{userId}
          templated: true
      id: '232333'
      username: 'Sam'
      createdAt: '2017-06-21T14:07:17Z'

  # Review
  user:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
    example:
      username: 'Sam'
      password: 'adidas123'

  # User Not Found Error
  userNotFound:
    type: object
    allOf:
      - $ref: '#/definitions/problemDetail'
    example:
      title: 'Not Found'
      detail: 'Cannot find any user with this id'
      status: 404
      instance: '/users/{userId}'

  halWishlist:
    type: object
    properties:
      wishlistCount:
        type: number
    allOf:
      - $ref: '#/definitions/halResource'
    example:
      _links:
        self:
          href: /users/{userId}/wishlist
          templated: true

        create:
          href: /users/{userId}/wishlist
          templated: true

        next:
          href: /users/{userId}/wishlist?offset=5&limit=5
          templated: true

        first:
          href: /users/{userId}/wishlist?offset=0&limit=5
          templated: true

        last:
          href: /users/{userId}/wishlist?offset=40&limit=5
          templated: true

      _embedded:
        wishlistCount: 122
        wishlist:
          - $ref: '#/definitions/halWishProduct/example'

  # HAL Wrapper
  halWishProduct:
    type: object
    allOf:
      - $ref: '#/definitions/halResource'
      - $ref: '#/definitions/wishProduct'
    example:
      _links:
        self:
          href: /products/{productId}
          templated: true
      id: 'DB1124'
      createdAt: '2017-06-21T14:07:17Z'


  # Review
  wishProduct:
    type: object
    properties:
      id:
        type: string
      createdAt:
        type: string
        readOnly: true
    required:
      - id
    example:
      id: 'DB1124'
      createdAt: '2017-06-21T14:07:17Z'

  #
  # -- DO NOT EDIT BEYOND THIS POINT --
  #

  # Media Types Definitions

  #
  # application/problem+json
  #
  problemDetail:
    type: object
    properties:
      type:
        type: string
      title:
        type: string
      status:
        type: number
      detail:
        type: string
      instance:
        type: string
    required:
      - title
      - detail

  #
  # application/hal+json defintion
  #
  halLinkObject:
    type: object
    required:
      - href
    properties:
      href:
        type: string
      templated:
        type: boolean
      #
      # WARN: Some version of OAS parser can have problem with property being called "type"
      # resulting in the error 'Schema "type" key must be a string'.
      #
      # For this reason we have commented out the "type" property of the link object.
      # See https://tools.ietf.org/html/draft-kelly-json-hal-08#section-5.3 for the definiton of
      # HAL's link object type property.
      #
      # type:
      #  type: string
      deprecation:
        type: string
      name:
        type: string
      profile:
        type: string
      title:
        type: string
      hreflang:
        type: string

  halCuriesLink:
    title: HAL Curies Link
    allOf:
      - type: object
        properties:
          templated:
            enum:
              - true
        required:
          - templated
      - $ref: '#/definitions/halLinkObject'

  halResource:
    title: HAL Resource Object
    type: object
    properties:
      _links:
        type: object
        additionalProperties:
          # WARN: Should be "anyOf" but "anyOf" isn't supported in Swagger 2.0
          allOf:
            - $ref: '#/definitions/halLinkObject'
            - type: array
              items:
                - $ref: '#/definitions/halLinkObject'
        properties:
          curies:
            # WARN: Should be "anyOf" but "anyOf" isn't supported in Swagger 2.0
            allOf:
              - $ref: '#/definitions/halCuriesLink'
              - type: array
                items:
                  - $ref: '#/definitions/halCuriesLink'
      _embedded:
        type: object
        additionalProperties: true
        # WARN: Apiary doesn't support circular references
        # additionalProperties:
        #   anyOf:
        #     - $ref: '#/definitions/hal_resource'
        #     - type: array
        #       items:
        #         - $ref: '#/definitions/hal_resource'